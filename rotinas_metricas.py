# imports e defini√ß√µes
import pandas as pd
import time
import numpy as np
import matplotlib.pyplot as plt
from datetime import date, timedelta
import streamlit as st
import math
from PIL import Image
import plotly.express as px
from funcoes import *

######################## Namespaces a serem analisados ########################

namespaces = pd.read_csv('./CSV/produto_namespace.csv')
#st.dataframe(namespaces)
namespace_rede = pd.read_csv('./CSV/namespace_rede.csv')

######################## Informa√ß√µes de licen√ßas, produto, gestor de conta e receita ########################

informacoes_hubspot = pd.read_csv('./CSV/informacoes_hubspot.csv')
#st.dataframe(informacoes_hubspot)

######################## Cabe√ßalho do Relat√≥rio ########################

st.image('[LOGO] Eduqo.png')
st.title('Relat√≥rio de Acompanhamento de Escolas/Redes')

st.markdown(
        """
        <style>
            .stProgress > div > div > div > div {
                background-color: #4A8AE8;
        }
        </style>""",
        unsafe_allow_html=True,
    )

######################## Barra lateral ########################

image = Image.open('[LOGO] Eduqo.png')
st.sidebar.image(image,caption='Eduqo - Plataforma QM√°gico',use_column_width=True)
st.sidebar.markdown('Feito por : Alexandre Fernandes (Padre)')

######################## Introdu√ß√£o ########################

st.subheader('**Per√≠odo de an√°lise**: *08/06/2021 e 06/09/2021*')

######################## Jun√ß√£o namespaces e informa√ß√µes do Hubspot ########################

namespaces_x_hubspot = pd.merge(namespaces, informacoes_hubspot, on = ['namespace','Produto'], how = 'left')
namespaces_x_hubspot2 = namespaces_x_hubspot.drop(columns = ['Unnamed: 0_x','Unnamed: 0_y','Intera√ß√µes A.A','Intera√ß√µes Cadernos'])
namespaces_x_hubspot3 = pd.merge(namespaces_x_hubspot2, namespace_rede, on = 'namespace', how = 'left')

######################## Descri√ß√£o do Relat√≥rio ########################

"""
    ### üéØ **Objetivo do Relat√≥rio**
    Esse relat√≥rio objetiva reduzir o tempo necess√°rio para analisar o uso da plataforma por escolas e redes.

    O primeiro pilar consiste das **Rotinas Pedag√≥gicas Digitais**.
"""
######################## Informa√ß√µes sobre os dados ########################

"""
    ### üîç **Informa√ß√µes sobre os dados analisados**
"""

st.write('**Total de namespaces analisados**: '+str(namespaces_x_hubspot2['namespace'].nunique()))

with st.expander("Por produto -> (clique aqui üñ±Ô∏è)"):
    namespaces_x_hubspot2_diagnostico = namespaces_x_hubspot2[namespaces_x_hubspot2['Produto'] == 'Diagn√≥stico']
    st.write('**Diagn√≥stiqo**: '+str(namespaces_x_hubspot2_diagnostico['namespace'].nunique()))
    namespaces_x_hubspot2_pedagogico = namespaces_x_hubspot2[namespaces_x_hubspot2['Produto'] == 'Pedag√≥gico']
    st.write('**Pedag√≥giqo**: '+str(namespaces_x_hubspot2_pedagogico['namespace'].nunique()))

with st.expander("Por faixa de licen√ßas -> (clique aqui üñ±Ô∏è)"):
    namespaces_x_hubspot2_030 = namespaces_x_hubspot2[namespaces_x_hubspot2['licen√ßas'] == '0 - 30']
    st.write('**Entre 0 e 30 alunos**: '+str(namespaces_x_hubspot2_030['namespace'].nunique()))
    namespaces_x_hubspot2_30400 = namespaces_x_hubspot2[namespaces_x_hubspot2['licen√ßas'] == '30 - 400']
    st.write('**Entre 30 e 400 alunos**: '+str(namespaces_x_hubspot2_30400['namespace'].nunique()))
    namespaces_x_hubspot2_400800 = namespaces_x_hubspot2[namespaces_x_hubspot2['licen√ßas'] == '400 - 800']
    st.write('**Entre 400 e 800 alunos**: '+str(namespaces_x_hubspot2_400800['namespace'].nunique()))
    namespaces_x_hubspot2_8001200 = namespaces_x_hubspot2[namespaces_x_hubspot2['licen√ßas'] == '800 - 1200']
    st.write('**Entre 800 e 1200 alunos**: '+str(namespaces_x_hubspot2_8001200['namespace'].nunique()))
    namespaces_x_hubspot2_1200x = namespaces_x_hubspot2[namespaces_x_hubspot2['licen√ßas'] == '1200 - x']
    st.write('**Mais de 1200 alunos**: '+str(namespaces_x_hubspot2_1200x['namespace'].nunique()))

with st.expander("Por gestor de conta -> (clique aqui üñ±Ô∏è)"):
    namespaces_x_hubspot2_gestor = namespaces_x_hubspot2.groupby('Deal Owner').nunique().reset_index()
    namespaces_x_hubspot2_gestor['Deal Owner'].replace('0','Sem informa√ß√£o no Hubspot', inplace = True)
    for i in range(len(namespaces_x_hubspot2_gestor['Deal Owner'])):
        st.write('**'+str(namespaces_x_hubspot2_gestor['Deal Owner'][i])+'**: '+str(namespaces_x_hubspot2_gestor['namespace'][i]))

######################## Rotinas Pedag√≥gicas Digitais ########################

st.header('**Rotinas Pedag√≥gicas Digitais**')
st.image('Rotinas Pedag√≥gicas Digitais.png', use_column_width=True, caption='Rotinas Pedag√≥gicas Digitais')

######################## Filtros na barra lateral ########################

###### Redes ######
rede = namespaces_x_hubspot3.sort_values(by = 'name')
rede2 = inserir_linha(pd.DataFrame(data = rede['name'].unique()),pd.DataFrame({0: 'Rede'}, index=[-1]))
rede_select = st.sidebar.selectbox('Selecione uma rede', rede2)

###### Grupo ######
if rede_select != 'Rede':
    grupo_ = rede[rede['name'] == rede_select]
    grupo = grupo_.sort_values(by = 'grupo')
else:
    grupo = rede.sort_values(by = 'grupo')
grupo2 = inserir_linha(pd.DataFrame(data = grupo['grupo'].unique()),pd.DataFrame({0: 'Grupo'}, index=[-1]))
grupo_select = st.sidebar.selectbox('Selecione um grupo', grupo2)

###### Gestor de contas ######
if grupo_select != 'Grupo':
    gestor_ = grupo[grupo['grupo'] == grupo_select]
    gestor = gestor_.sort_values(by = 'Deal Owner')
else:
    gestor = grupo.sort_values(by = 'Deal Owner')
gestor2 = inserir_linha(pd.DataFrame(data = gestor['Deal Owner'].unique()),pd.DataFrame({0: 'Gestor'}, index=[-1]))
gestor_select = st.sidebar.selectbox('Selecione um gestor', gestor2)

###### Produto ######
if gestor_select != 'Gestor':
    produto_ = gestor[gestor['Deal Owner'] == gestor_select]
    produto = produto_.sort_values(by = 'Produto')
else:
    produto = gestor.sort_values(by = 'Produto')
produto2 = inserir_linha(pd.DataFrame(data = produto['Produto'].unique()),pd.DataFrame({0: 'Produto'}, index=[-1]))
produto_select = st.sidebar.selectbox('Selecione um produto', produto2)

###### Faixa de licen√ßas ######
if produto_select != 'Produto':
    licen√ßas_ = produto[produto['Produto'] == produto_select]
    licen√ßas = licen√ßas_.sort_values(by = 'licen√ßas')
else:
    licen√ßas = produto.sort_values(by = 'licen√ßas')
licen√ßas2 = inserir_linha(pd.DataFrame(data = licen√ßas['licen√ßas'].unique()),pd.DataFrame({0: 'Faixa de licen√ßas'}, index=[-1]))
licen√ßas_select = st.sidebar.selectbox('Selecione uma faixa de licen√ßas', licen√ßas2)

###### Namespace ######
if licen√ßas_select != 'Faixa de licen√ßas':
    namespace_ = licen√ßas[licen√ßas['licen√ßas'] == licen√ßas_select]
    namespace = namespace_.sort_values(by = 'namespace')
else:
    namespace = licen√ßas.sort_values(by = 'namespace')
namespace2 = inserir_linha(pd.DataFrame(data = namespace['namespace'].unique()),pd.DataFrame({0: 'Namespace'}, index=[-1]))
namespace_select = st.sidebar.selectbox('Selecione um namespace', namespace2)

######################## Resultados gerais por rotina ########################

st.subheader('**Resultados gerais por Rotina Pedag√≥gica Digital**')

############## Avalia√ß√£o Diagn√≥stica ##############

###### Leitura dos dados de cada rotina por namespace ######
avaliacao_diagnostica_namespace = pd.read_csv('./CSV/Avalia√ß√£o Diagn√≥stica/Resultados por namespace/avaliacao_diagnostica_namespace.csv')
avaliacao_diagnostica_namespace2 = pd.merge(namespaces_x_hubspot3['namespace'],avaliacao_diagnostica_namespace, on = 'namespace', how = 'left')
avaliacao_diagnostica_namespace3 = avaliacao_diagnostica_namespace2.groupby('namespace').mean().reset_index()
avaliacao_diagnostica_namespace4 = avaliacao_diagnostica_namespace3.drop(columns = ['Unnamed: 0'])

###### Normaliza√ß√£o dos dados ######
for coluna in avaliacao_diagnostica_namespace4.columns:
    if coluna in ('N¬∫ de AAs aplicadas da estante','M√©dia de exerc√≠cios em relat√≥rios de AD por turma'):
        avaliacao_diagnostica_namespace4 = normalizacao(avaliacao_diagnostica_namespace4,coluna,0.1, 0.9)
#st.dataframe(avaliacao_diagnostica_namespace4)

###### M√©dia Final ######
col = avaliacao_diagnostica_namespace4.loc[: , "Porcentagem de exerc√≠cios de AAs em relat√≥rios de AD":"Porcentagem de administradores que visualizaram relat√≥rios de AD"]
avaliacao_diagnostica_namespace4['M√©dia'] = col.mean(axis=1)

###### Quartis ######
avaliacao_diagnostica_namespace5 = quartis(avaliacao_diagnostica_namespace4,'M√©dia')
avaliacao_diagnostica_namespace_select = avaliacao_diagnostica_namespace5[avaliacao_diagnostica_namespace5['namespace'] == namespace_select].reset_index(drop = True)

###### M√©dia do namespace x m√©dia Eduqo ######
if avaliacao_diagnostica_namespace_select['M√©dia'][0] >= avaliacao_diagnostica_namespace5['M√©dia'].mean():
    comparativo_media_avaliacao_diagnostica = ' üü©'
else:
    comparativo_media_avaliacao_diagnostica = ' üü®'
st.subheader('**Avalia√ß√£o Diagn√≥stica'+' (Pontua√ß√£o: '+str(round(100*avaliacao_diagnostica_namespace_select['M√©dia'][0], 2))+')**')
st.markdown('O namespace '+namespace_select+ ' est√° no **'+avaliacao_diagnostica_namespace_select['Quartil'][0]+ ' quartil**!') 
st.progress(avaliacao_diagnostica_namespace_select['M√©dia'][0])
st.write('Pontua√ß√£o **M√©dia Eduqo: '+str(round(100*avaliacao_diagnostica_namespace5['M√©dia'].mean(), 2))+comparativo_media_avaliacao_diagnostica+'**')

###### Jun√ß√£o Hubspot para pegar m√©dia das escolas que tem o mesmo produto e mesma faixa de licen√ßas ######
juncao_hubspot_diagnostica_namespace = pd.merge(namespaces_x_hubspot3,avaliacao_diagnostica_namespace5, on = 'namespace', how = 'left')
avaliacao_diagnostica_namespace_select_juncao = juncao_hubspot_diagnostica_namespace[juncao_hubspot_diagnostica_namespace['namespace'] == namespace_select].reset_index(drop = True)
juncao_hubspot_diagnostica_namespace2 = juncao_hubspot_diagnostica_namespace[juncao_hubspot_diagnostica_namespace['Produto'] == avaliacao_diagnostica_namespace_select_juncao['Produto'][0]]
juncao_hubspot_diagnostica_namespace3 = juncao_hubspot_diagnostica_namespace2[juncao_hubspot_diagnostica_namespace2['licen√ßas'] == avaliacao_diagnostica_namespace_select_juncao['licen√ßas'][0]]
if avaliacao_diagnostica_namespace_select['M√©dia'][0] >= juncao_hubspot_diagnostica_namespace3['M√©dia'].mean():
    comparativo_media_avaliacao_diagnostica_juncao = ' üü©'
else:
    comparativo_media_avaliacao_diagnostica_juncao = ' üü®'
st.write('Pontua√ß√£o **M√©dia '+avaliacao_diagnostica_namespace_select_juncao['Produto'][0]+' com faixa de licen√ßas de '+avaliacao_diagnostica_namespace_select_juncao['licen√ßas'][0]+': '+str(round(100*juncao_hubspot_diagnostica_namespace3['M√©dia'].mean(), 2))+comparativo_media_avaliacao_diagnostica_juncao+'**')

st.write('---')
############## Avalia√ß√£o Somativa ##############

###### Leitura dos dados de cada rotina por namespace ######
avaliacao_somativa_namespace = pd.read_csv('./CSV/Avalia√ß√£o Somativa/Resultados por namespace/avaliacao_somativa_namespace.csv')
avaliacao_somativa_namespace2 = pd.merge(namespaces_x_hubspot3['namespace'],avaliacao_somativa_namespace, on = 'namespace', how = 'left')

###### Normaliza√ß√£o dos dados ######
for coluna in avaliacao_somativa_namespace2.columns:
    if coluna in ('N√∫mero de AAs por turma','M√©dia de exerc√≠cios de AA por turma'):
        avaliacao_somativa_namespace2 = normalizacao(avaliacao_somativa_namespace2,coluna,0.1, 0.9)
    if coluna in ('Tempo m√©dio entre publica√ß√£o e √≠nicio de AA'):
        avaliacao_somativa_namespace2 = normalizacao_datetime(avaliacao_somativa_namespace2,coluna,0.1, 0.9)
    if coluna in ('Tempo de corre√ß√£o por aluno por quest√£o','Tempo m√©dio entre cria√ß√£o e publica√ß√£o de AA por quest√£o'):
        avaliacao_somativa_namespace2 = normalizacao_datetime_inversa(avaliacao_somativa_namespace2,coluna,0.1, 0.9)
avaliacao_somativa_namespace3 = avaliacao_somativa_namespace2.drop(columns = ['Unnamed: 0'])

###### M√©dia Final ######
col = avaliacao_somativa_namespace3.loc[: , "Porcentagem de engajamento em AAs":"Porcentagem de administrantes que visualizaram relat√≥rios de AA"]
avaliacao_somativa_namespace3['M√©dia'] = col.mean(axis=1)

###### Quartis ######
avaliacao_somativa_namespace4 = quartis(avaliacao_somativa_namespace3,'M√©dia')
avaliacao_somativa_namespace_select = avaliacao_somativa_namespace4[avaliacao_somativa_namespace4['namespace'] == namespace_select].reset_index(drop = True)

###### M√©dia do namespace x m√©dia Eduqo ######
if avaliacao_somativa_namespace_select['M√©dia'][0] >= avaliacao_somativa_namespace4['M√©dia'].mean():
    comparativo_media_avaliacao_somativa = ' üü©'
else:
    comparativo_media_avaliacao_somativa = ' üü®'
st.subheader('**Avalia√ß√£o Somativa'+' (Pontua√ß√£o: '+str(round(100*avaliacao_somativa_namespace_select['M√©dia'][0], 2))+')**')
st.markdown('O namespace '+namespace_select+ ' est√° no **'+avaliacao_somativa_namespace_select['Quartil'][0]+ ' quartil**!') 
st.progress(avaliacao_somativa_namespace_select['M√©dia'][0])
st.write('Pontua√ß√£o **M√©dia Eduqo: '+str(round(100*avaliacao_somativa_namespace4['M√©dia'].mean(), 2))+comparativo_media_avaliacao_somativa+'**')

###### Jun√ß√£o Hubspot para pegar m√©dia das escolas que tem o mesmo produto e mesma faixa de licen√ßas ######
juncao_hubspot_somativa_namespace = pd.merge(namespaces_x_hubspot3,avaliacao_somativa_namespace4, on = 'namespace', how = 'left')
avaliacao_somativa_namespace_select_juncao = juncao_hubspot_somativa_namespace[juncao_hubspot_somativa_namespace['namespace'] == namespace_select].reset_index(drop = True)
juncao_hubspot_somativa_namespace2 = juncao_hubspot_somativa_namespace[juncao_hubspot_somativa_namespace['Produto'] == avaliacao_somativa_namespace_select_juncao['Produto'][0]]
juncao_hubspot_somativa_namespace3 = juncao_hubspot_somativa_namespace2[juncao_hubspot_somativa_namespace2['licen√ßas'] == avaliacao_somativa_namespace_select_juncao['licen√ßas'][0]]
if avaliacao_somativa_namespace_select['M√©dia'][0] >= juncao_hubspot_somativa_namespace3['M√©dia'].mean():
    comparativo_media_avaliacao_somativa_juncao = ' üü©'
else:
    comparativo_media_avaliacao_somativa_juncao = ' üü®'
st.write('Pontua√ß√£o **M√©dia '+avaliacao_somativa_namespace_select_juncao['Produto'][0]+' com faixa de licen√ßas de '+avaliacao_somativa_namespace_select_juncao['licen√ßas'][0]+': '+str(round(100*juncao_hubspot_somativa_namespace3['M√©dia'].mean(), 2))+comparativo_media_avaliacao_somativa_juncao+'**')


######################## Resultados detalhados por rotina ########################

st.subheader('**Resultados detalhados por Rotina Pedag√≥gica Digital**')

############## Avalia√ß√£o Diagn√≥stica ##############

st.markdown('**Avalia√ß√£o Diagn√≥stica**')

###### Namespaces destaques ######
avaliacao_diagnostica_namespace6 = avaliacao_diagnostica_namespace5.copy()
avaliacao_diagnostica_namespace6['M√©dia'] = round(100*avaliacao_diagnostica_namespace6['M√©dia'],2)
avaliacao_diagnostica_namespace6.rename(columns = {'M√©dia':'M√©dia (0 a 100)'}, inplace = True)
avaliacao_diagnostica_namespace7 = pd.DataFrame()
avaliacao_diagnostica_namespace7['namespace'] = avaliacao_diagnostica_namespace6['namespace']
avaliacao_diagnostica_namespace7['M√©dia (0 a 100)'] = avaliacao_diagnostica_namespace6['M√©dia (0 a 100)']
avaliacao_diagnostica_namespace7['Quartil'] = avaliacao_diagnostica_namespace6['Quartil']
avaliacao_diagnostica_namespace8 = avaliacao_diagnostica_namespace7.groupby('namespace').mean()
avaliacao_diagnostica_namespace9 = quartis(avaliacao_diagnostica_namespace8,'M√©dia (0 a 100)').reset_index()
avaliacao_diagnostica_namespace10 = avaliacao_diagnostica_namespace9.sort_values(by = 'M√©dia (0 a 100)', ascending = False)
with st.expander("Visualizar as escolas destaque em Avalia√ß√£o Somativa -> (clique aqui üñ±Ô∏è)"):
    avaliacao_diagnostica_namespace11 = destaques_rotina(avaliacao_diagnostica_namespace10)
    st.table(avaliacao_diagnostica_namespace11)

###### Visualizar um quartil ######
ver_quartil_avaliacao_diagnostica = st.radio('Escolha o quartil que deseja ver os resultados de Avalia√ß√£o Diagn√≥stica üìà',('Nenhum','1¬∫','2¬∫','3¬∫','4¬∫'))
if ver_quartil_avaliacao_diagnostica != 'Nenhum':
    avaliacao_diagnostica_namespace_quartil = visualizacao_resultado_quartil(ver_quartil_avaliacao_diagnostica,avaliacao_diagnostica_namespace10)
    st.table(avaliacao_diagnostica_namespace_quartil)

###### Visualiza√ß√£o das m√©tricas do namespace selecionado ######
with st.expander("Visualizar os resultados de Avalia√ß√£o Diagn√≥stica do namespace selecionado por m√©trica -> (clique aqui üñ±Ô∏è)"):
    for coluna in avaliacao_diagnostica_namespace_select.columns:
        if (coluna != 'namespace' and coluna != 'M√©dia' and coluna != 'Quartil'):
            if avaliacao_diagnostica_namespace_select[coluna][0] >= avaliacao_diagnostica_namespace6[coluna].mean():
                comparativo_media_avaliacao_diagnostica = ' üü©'
            else:
                comparativo_media_avaliacao_diagnostica = ' üü®'
            st.markdown('**'+coluna+' (Pontua√ß√£o: '+str(round(100*avaliacao_diagnostica_namespace_select[coluna][0], 2))+')**')
            st.progress(avaliacao_diagnostica_namespace_select[coluna][0])
            st.write('**M√©dia Eduqo: '+str(round(100*avaliacao_diagnostica_namespace6[coluna].mean(), 2))+comparativo_media_avaliacao_diagnostica+'**')
            if avaliacao_diagnostica_namespace_select[coluna][0] >= juncao_hubspot_diagnostica_namespace3[coluna].mean():
                comparativo_media_avaliacao_diagnostica_juncao = ' üü©'
            else:
                comparativo_media_avaliacao_diagnostica_juncao = ' üü®'
            st.write('**M√©dia '+avaliacao_diagnostica_namespace_select_juncao['Produto'][0]+' com faixa de licen√ßas de '+avaliacao_diagnostica_namespace_select_juncao['licen√ßas'][0]+': '+str(round(100*juncao_hubspot_diagnostica_namespace3[coluna].mean(), 2))+comparativo_media_avaliacao_diagnostica_juncao+'**')
            st.write('----')


############## Avalia√ß√£o Somativa ##############

st.markdown('**Avalia√ß√£o Somativa**')

###### Namespaces destaques ######
avaliacao_somativa_namespace5 = avaliacao_somativa_namespace4.copy()
avaliacao_somativa_namespace5['M√©dia'] = round(100*avaliacao_somativa_namespace5['M√©dia'],2)
avaliacao_somativa_namespace5.rename(columns = {'M√©dia':'M√©dia (0 a 100)'}, inplace = True)
avaliacao_somativa_namespace6 = pd.DataFrame()
avaliacao_somativa_namespace6['namespace'] = avaliacao_somativa_namespace5['namespace']
avaliacao_somativa_namespace6['M√©dia (0 a 100)'] = avaliacao_somativa_namespace5['M√©dia (0 a 100)']
avaliacao_somativa_namespace6['Quartil'] = avaliacao_somativa_namespace5['Quartil']
avaliacao_somativa_namespace7 = avaliacao_somativa_namespace6.groupby('namespace').mean()
avaliacao_somativa_namespace8 = quartis(avaliacao_somativa_namespace7,'M√©dia (0 a 100)').reset_index()
avaliacao_somativa_namespace9 = avaliacao_somativa_namespace8.sort_values(by = 'M√©dia (0 a 100)', ascending = False)
with st.expander("Visualizar as escolas destaque em Avalia√ß√£o Somativa -> (clique aqui üñ±Ô∏è)"):
    avaliacao_somativa_namespace10 = destaques_rotina(avaliacao_somativa_namespace9)
    st.table(avaliacao_somativa_namespace10)

###### Visualizar um quartil ######
ver_quartil_avaliacao_somativa = st.radio('Escolha o quartil que deseja ver os resultados de Avalia√ß√£o Somativa üìà',('Nenhum','1¬∫','2¬∫','3¬∫','4¬∫'))
if ver_quartil_avaliacao_somativa != 'Nenhum':
    avaliacao_somativa_namespace_quartil = visualizacao_resultado_quartil(ver_quartil_avaliacao_somativa,avaliacao_somativa_namespace9)
    st.table(avaliacao_somativa_namespace_quartil)

###### Visualiza√ß√£o das m√©tricas do namespace selecionado ######
with st.expander("Visualizar os resultados de Avalia√ß√£o Somativa do namespace selecionado por m√©trica -> (clique aqui üñ±Ô∏è)"):
    for coluna in avaliacao_somativa_namespace_select.columns:
        if (coluna != 'namespace' and coluna != 'M√©dia' and coluna != 'Quartil'):
            if avaliacao_somativa_namespace_select[coluna][0] >= avaliacao_somativa_namespace5[coluna].mean():
                comparativo_media_avaliacao_somativa = ' üü©'
            else:
                comparativo_media_avaliacao_somativa = ' üü®'
            st.markdown('**'+coluna+' (Pontua√ß√£o: '+str(round(100*avaliacao_somativa_namespace_select[coluna][0], 2))+')**')
            st.progress(avaliacao_somativa_namespace_select[coluna][0])
            st.write('**M√©dia Eduqo: '+str(round(100*avaliacao_somativa_namespace5[coluna].mean(), 2))+comparativo_media_avaliacao_somativa+'**')
            if avaliacao_somativa_namespace_select[coluna][0] >= juncao_hubspot_somativa_namespace3[coluna].mean():
                comparativo_media_avaliacao_somativa_juncao = ' üü©'
            else:
                comparativo_media_avaliacao_somativa_juncao = ' üü®'
            st.write('**M√©dia '+avaliacao_somativa_namespace_select_juncao['Produto'][0]+' com faixa de licen√ßas de '+avaliacao_somativa_namespace_select_juncao['licen√ßas'][0]+': '+str(round(100*juncao_hubspot_somativa_namespace3[coluna].mean(), 2))+comparativo_media_avaliacao_somativa_juncao+'**')
            st.write('----')


